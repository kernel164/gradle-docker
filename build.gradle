apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'bintray'

group = 'se.transmode.gradle'

task wrapper(type: Wrapper) { gradleVersion = '1.11' }

buildscript {
    // inspired by https://github.com/Netflix/gradle-template
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

repositories {
    mavenCentral()
}

apply from: file('gradle/license.gradle')
apply from: file('gradle/idea.gradle')
apply from: file('gradle/maven.gradle')

def getVersionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--long'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
version = "1.2"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

sourceSets {
    integTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        groovy {
            srcDir 'src/integTest/groovy'
        }
        resources {
            srcDir 'src/integTest/resources'
        }
    }
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile 'junit:junit-dep:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

task integTest(type: Test) {
    group = 'verification'
    description = 'Runs the integration tests.'
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath

}

// run integration tests after unit tests if both are scheduled for execution
integTest.mustRunAfter test

check.dependsOn(integTest)

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

bintray {
    user = rootProject.hasProperty('bintrayUser') ? bintrayUser : ""
    key = rootProject.hasProperty('bintrayKey') ? bintrayKey : ""
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = 'gradle-docker'
        desc = 'gradle-docker'
        licenses = ['Apache-2.0']
        labels = ['gradle', 'docker']
    }
    dryRun = rootProject.hasProperty('dryRun') ? dryRun : false
}
